import random 
import math 
import matplotlib.pyplot as plt
import statistics as stats
import collections

#Valores para probar:
#middle_square: seed=1931 n=10 -> [3728761, 53100369, 1006009, 3600, 1296, 144, 1, 0, 0]
#gcl: seed=5 a=7 c=9 mod=11 -> [0, 9, 6, 7, 3, 8, 10, 2, 1, 5]
#     seed=7 a=1 c=7 mod=13 ->[1, 8, 2, 9, 3, 10, 4, 11, 5, 12, 6, 0, 7] 

def menu():
    print("Menu: 0 para salir")
    print("1 - Middle Square") 
    print("2 - Generador Congruencial")
    rta = int(input("Ingrese la opcion elegida: "))
    return rta

def menu2():
    print("Pruebas de aleatoriedad:")
    print("1- Kolmogorov Smirnov")
    print("2- Chi-cuadrado")
    print("3-Pruebas de Series")
    rta2=int(input("Ingrese opcion deseada: "))
    return rta2

def middle_square ():   
    semillas=[]
    numeros=[]
    t=1
    seed= int(input("Ingrese una semilla de 4 numeros: "))
    n= int(input("Ingrese cantidad de repeticiones: "))
    seed_ini=seed
    for i in range(1, n):   
        s=[]
        x = seed * seed
        numeros.append(x)
        dig_x= len(str(numeros[t-1]))
        if dig_x != 8:
            new_seed = str(x).zfill(8) #valor de 8 digitos para generar la nueva semilla
        else: new_seed=str(x)
        x_list=list(new_seed) #convierto a lista para extraer despues las posiciones q necesito
        for i in range(2,6): #0 1 2 3 4 5 6 7 8 - necesito las posiciones 2 3 4 5
            s+=x_list[i]
        seed = int(''.join(s)) #paso lista a numero
        semillas.append(seed) 
    print(numeros,semillas)
    x1 = range(1, n)
    plt.plot(x1, numeros, label="seed={0}, n={1}" .format(seed_ini, n))

def prueba_ks(numeros):
    print("Datos de la prueba Kolmogorov-Smirnov \n")
    n=len(numeros)
    numerosAux1=[]
    #print(n)
    for i in range(0,n):
        numerosAux1.append(numeros[i]/n) #divido todos por la cantidad de numeros
    numerosAux1.sort() #no tiene sentido pero es un paso de la prueba
    print("Números obtenidos en el generador: \n")
    print(numerosAux1)
    if n<50: 
        d_ks= float(input("Ingrese el valor de la tabla:")) #tengo que ingresar el valor de la tabla
    else:  
        d_ks=1.36/math.sqrt(n) #grado de confianza de 95%-- valor sacado de la tabla
    #print(d_ks)
    d_mas = []
    #D +
    for i in range(1,n):
        valor=(i/n)-numerosAux1[i-1]
        d_mas.append(valor)
    #D -
    d_menos=[]
    for i in range (1,n):
        valor=numerosAux1[i-1]-(((i-1)-1)/n)
        d_menos.append(valor)
    d1= max([num for num in d_mas]) #busco los numeros mayores de cada lista d 
    print("D- :",d1)
    d2= max([num for num in d_menos])
    print("D- : ",d2)
    if d1>d2: d=d1 
    else: d=d2
    #print(d)
    print("\nD = {}".format(d))
    if d>d_ks: print("No sigue una distribucion uniforme segun la prueba Kolmogorov Smirnov")
    else : print("Sigue una distribucion uniforme segun la prueba Kolmogorov Smirnov")


def prueba_series(mod,numeros):
    long = len(numeros)
    numerosAux2=[]
    #print("longitud", long)
    k = 10   #va a haber 10 rangos
    for i in range(0,long):
        numerosAux2.append(numeros[i]/mod)
    #print ("numeros:",numeros)

    # Crear el array bidimensional de las celdas con sus frecuencias
    freqs =  [[0 for i in range(k)] for i in range(k)]
    frec_intervalos=[]
    # Para cada par de rangos (i,j)
    for i in range(1, k + 1):
        maxI = i / k
        minI = maxI - (1 / k)
        for j in range(1, k + 1):
            maxJ = j / k
            minJ = maxJ - (1 / k)
            for n in range(0,(long-1)):
                if numerosAux2[n] < maxI and numerosAux2[n] >= minI and numerosAux2[(n+1)] < maxJ and numerosAux2[(n+1)] >= minJ:
                    # Si el primer elemento esta en el rango i, y el segundo en el j,
                    # sumamos 1 a la frecuencia de esos rangos
                    freqs[i - 1][j - 1] += 1

    #print("frecuencias: ", freqs)
    frec_esperada= (long-1)/10

    for i in range(0,10):
        cont = 0
        for j in range(0,10):
            cont = cont +  freqs[i][j]
        frec_intervalos.append(cont)
    print("Frecuencia observada en cada intervalo: ",frec_intervalos)

    # χ2 = k/n * Σ(fj - n/k)^2
    acum=0
    for i in frec_intervalos:
        acum+= (i - frec_esperada) ** 2

    #print(acum)
    chi2= acum * (1/ frec_esperada)
    #print("chi2: ", chi2)

    chi_tabla = 16.92
    if (chi2 < chi_tabla):
        print('Los numeros son independientes.')
    else:
        print('Los números no son independientes.')
    
    
def chiCuadrado(numeros):                           
    n=len(numeros)
    print('n:', n)
    numerosAux3=[]
    k=10 #hacemos 10 rangos siempre 
    #divido todos por la longitud del arreglo
    for i in range(0,n):
        numerosAux3.append(numeros[i]/n)
    print(numerosAux3)
    #Calculamos frecuencias absolutas
    
    freqs = [0 for i in range(k)]
    #Para cada rango
    for i in range(1,k+1):
        max = i/k
        min = max - (1/k)
        for xi in numerosAux3:
            if xi < max and xi >= min:
                #Si el numero esta en el rango, sumamos 1 a la frecuencia de ese rango
                freqs[i-1]+=1
    print('frecuencias: ',freqs)
    
    Ei=n/k #totalDatos/totalIntervalos
    #χ2 = 1/Ei * Σ(Oi - Ei)^2
    chi2 = (1/Ei) * sum ( [ (Oi-(Ei)) **2 for Oi in freqs ] )
    print('chi: ', chi2)
    
    #alfa=0.05 95% grados de libertad=k-1
    chi_tabla=16.92 #no encuentro en ningun lado como calcularlo sin tabla tabla chi con alfa=0.05 y v=9
    if (chi2<chi_tabla): print('La hipótesis nula es aceptada. La distribución es uniforme')
    else: print('La hipótesis nula no es aceptada. La distribución no es uniforme')
    
    
    fig, ax=plt.subplots()
    ax.scatter(numerosAux3, numerosAux3)
    plt.show()

def gcl():  
    x = int(input("Introduce el valor de la semilla: "))
    a = int(input("Introduce el valor del multiplicador a: "))
    c = int(input("Introduce el valor de la constante aditiva c: "))
    mod = int(input("Introduce el valor del modulo m: "))
    periodo = 0
    bandera = 0
    numeros = []
    while(bandera != x): #el codigo se ejecuta hasta que vuelve a generarse la semilla inicialmente ingresada
        if (periodo == 0): #en la primer vuelta asigno que la bandera será x(la semilla ingresada). no puedo asignarlo antes del while porque de ese modo nunca entraria
            bandera = x
        x = (a * x + c) % mod #calculo nueva semilla
        numeros.append(x)
        periodo = periodo + 1 #voy contando las vueltas

    print(numeros)
    x1 = range(0, periodo)
    plt.plot(x1, numeros, label="seed={0}, a={1}, c={2}, mod={3}" .format(bandera, a, c, mod))
    if(periodo == mod): print("El periodo es completo: ", periodo)
    else: print("El periodo es incompleto:", periodo)
    
    continuar=1
    while continuar==1:
        rta2= menu2()
        if(rta2==1): prueba_ks(numeros)
        elif (rta2==2): chiCuadrado(numeros)
        elif (rta2==3): prueba_series(mod, numeros)
        continuar=int(input('Realizar otra prueba: 1 SI // 0 NO : '))


print('Bienvenido al generador de números pseudoaleatorios')
seguir=int(input("1 ejecutar, 0 salir: "))
while seguir==1:
    rta = menu()
    if rta == 1: middle_square()
    elif rta == 2: gcl()
    seguir = int(input("1 ejecutar, 0 salir: "))
plt.legend(loc="upper right")
plt.xlabel('Período')
plt.ylabel('N° Pseudoaleatorios')
plt.title('Generadores de N° Pseudoaleatorios')
#plt.show()
